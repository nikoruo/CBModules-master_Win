/* -------------------------------------------------------------------------- */
/*    Parameter identifier                                                    */
/*      key    no   type value  min  max   default   save to file             */
/*      enum of values                                                        */
/*      name of values                                                        */
/*      printing                                                              */
/* -------------------------------------------------------------------------- */

Fact( OverWrite,
      "Overwrite",
      'O',    0,  BOOL,   0,    0,   1,     NO,      NO,
      ow1, ow2, ow3, ow4, ow5, ow6, ow7, ow8, ow9, ow10,
      "NO", "YES", 0, 0, 0, 0, 0, 0, 0, 0,
      NO )

Fact( ShowProgress,
      "Quiet Level",
      'Q',    1,  INT,    0,    0,  99,      2,      NO,
      sp1, sp2, sp3, sp4, sp5, sp6, sp7, sp8, sp9, sp10,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      NO )

Fact( CodebookSize,
      "Codebook Size (init.&res)",
      'S',    1,  INT,    0,    1,9999,    256,     YES,
      cs1, cs2, cs3, cs4, cs5, cs6, cs7, cs8, cs9, cs10,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      YES )

Fact( RandomSeed,
      "Random Seed, 0=clock ",
      'Z',    1,  INT,    0,    0,2147483647,     0,      NO,
      rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8, rs9, rs10,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      Value(RandomSeed) != 0 )

/* -------------------------------------------------------------------------- */
/*    Parameter identifier                                                    */
/*      key    no   type value  min  max   default   save to file             */
/*      enum of values                                                        */
/*      name of values                                                        */
/*      printing                                                              */
/* -------------------------------------------------------------------------- */

Fact( AlternatingOrder,
      "Alternating Order",
      'A',    1, ENUM,    0,    0,   3,      0,     YES,
      SplitMerge, MergeSplit, FiftyFifty, BetterOne, ao5, ao6, ao7, ao8, ao9, ao10,
      "Split and Merge", "Merge and Split", "Fifty-Fifty", "Better one of Merge and Split", 0, 0, 0, 0, 0, 0,
      YES )

Fact( AlternatingAmount,
      "Step Size",
      'A',    2,  INT,    0,    0,9999,      1,     YES,
      aa1, aa2, aa3, aa4, aa5, aa6, aa7, aa8, aa9, aa10,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      YES )

Fact( MinCodebookSize,
      "Min. Temp. CB Size",
      'A',    3,  INT,    0,    1,9999,    256,     YES,
      mincs1, mincs2, mincs3, mincs4, mincs5, mincs6, mincs7, mincs8, mincs9, mincs10,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      YES )

Fact( MaxCodebookSize,
      "Max. Temp. CB Size",
      'A',    4,  INT,    0,    1,9999,    256,     YES,
      maxcs1, maxcs2, maxcs3, maxcs4, maxcs5, maxcs6, maxcs7, maxcs8, maxcs9, maxcs10,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      YES )

/* -------------------------------------------------------------------------- */
/*    Parameter identifier                                                    */
/*      key    no   type value  min  max   default   save to file             */
/*      enum of values                                                        */
/*      name of values                                                        */
/*      printing                                                              */
/* -------------------------------------------------------------------------- */

Fact( StepSizeChange,
      "Step Size Change",
      'B',    1,  INT,    0,    0, 100,      0,     YES,
      ssc1, ssc2, ssc3, ssc4, ssc5, ssc6, ssc7, ssc8, ssc9, ssc10,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      YES )

Fact( Iterations,
      "Iterations",
      'I',    1,  INT,    0,    1,9999,      1,     YES,
      iter1, iter2, iter3, iter4, iter5, iter6, iter7, iter8, iter9, iter10,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      YES )

Fact( IMSGLAIterations,
      "GLA iter. after MS step",
      'G',    1,  INT,    0,    0,9999,      0,      NO,
      iglai1, iglai2, iglai3, iglai4, iglai5, iglai6, iglai7, iglai8, iglai9, iglai10,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      Value(IMSGLAIterations) == YES )

Fact( RequireDistortionDecrease,
      "Dist. Decrease Required",
      'D',    0,  BOOL,   0,    0,   1,     NO,      NO,
      ddr1, ddr2, ddr3, ddr4, ddr5, ddr6, ddr7, ddr8, ddr9, ddr10,
      "NO", "YES", 0, 0, 0, 0, 0, 0, 0, 0,
      Value(RequireDistortionDecrease) == YES )

/* -------------------------------------------------------------------------- */
/*    Parameter identifier                                                    */
/*      key    no   type value  min  max   default   save to file             */
/*      enum of values                                                        */
/*      name of values                                                        */
/*      printing                                                              */
/* -------------------------------------------------------------------------- */

/* PNN */

Fact( PNNGLAIterations,
      "GLA iter. after PNN",
      'G',    3,  INT,    0,    0,9999,      0,      NO,
      pglai1, pglai2, pglai3, pglai4, pglai5, pglai6, pglai7, pglai8, pglai9, pglai10,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      Value(PNNGLAIterations) == YES )

/* -------------------------------------------------------------------------- */
/*    Parameter identifier                                                    */
/*      key    no   type value  min  max   default   save to file             */
/*      enum of values                                                        */
/*      name of values                                                        */
/*      printing                                                              */
/* -------------------------------------------------------------------------- */

/* SPLIT */

Fact( PartitionErrorType,
      "Partition error type",
      'E',    1,  ENUM,   0,    0,   6,      1,      NO,
      SplitAllPartitions, SquareError, SizeOfPartition,
      FurthestTwoVectors, ThirdMoment, SplitRandom, OptimalSelection, pet8, pet9, pet10,
      "Split All Partitions", "Square error", "Size of partition", "Furthest two vectors", "ThirdMoment (pseudo)", "Split Random", "Optimal Selection", 0, 0, 0,
      YES )

Fact( HyperplanePivot,
      "Hyperplane Pivot",
      'H',    1,  ENUM,   0,    0,   7,      2,      NO,
      HPPCentroid, HPPOptimal, HPPOptimalEquitz, HPPWeightedCentroid, HPPGoeddelBass, HPPMomentPreserving, HPPLloydScalarQuantization, HPPOptimalWu, hpp9, hpp10,
      "Centroid", "Optimal", "Optimal (Equitz)", "Weighted Centroid", "MinMaxMean", "Moment Preserving", "Lloyd Scalar Quantization", "Optimal (Wu)", 0, 0,
      YES )

Fact( HyperplaneLine,
      "Hyperplane Line",
      'H',    2,  ENUM,   0,    0,   2,      0,      NO,
      HPLPCA, HPLRegression, HPLFurthest, hpl4, hpl5, hpl6, hpl7, hpl8, hpl9, hpl10,
      "PCA", "Regression", "Furthest vectors", 0, 0, 0, 0, 0, 0, 0,
      YES )

Fact( PartitionRemapping,
      "Partition Remapping",
      'L',    0,  BOOL,   0,    0,   1,     NO,      NO,
      pr1, pr2, pr3, pr4, pr5, pr6, pr7, pr8, pr9, pr10,
      "NO", "YES", 0, 0, 0, 0, 0, 0, 0, 0,
      Value(PartitionRemapping) == YES )

Fact( SplitGLAIterations,
      "GLA iter. after Split",
      'G',    2,  INT,    0,    0,9999,      0,      NO,
      sglai1, sglai2, sglai3, sglai4, sglai5, sglai6, sglai7, sglai8, sglai9, sglai10,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      Value(SplitGLAIterations) == YES )

/* -------------------------------------------------------------------------- */
/*    Parameter identifier                                                    */
/*      key    no   type value  min  max   default   save to file             */
/*      enum of values                                                        */
/*      name of values                                                        */
/*      printing                                                              */
/* -------------------------------------------------------------------------- */

/* SA - SIMULATED ANNEALING */

Fact( VectorRandomizing,
      "Vector Randomizing",
      'R',    1,  ENUM,   0,    0,   3,      0,      NO,
      NoRandomizing, RandomCentroid, RandomTrainingSet, RandomBoth, vr5, vr6, vr7, vr8, vr9, vr10,
      "No Randomizing", "Random Centroid", "Random Training Set", "Random Both", 0, 0, 0, 0, 0, 0,
      Value(VectorRandomizing) != NoRandomizing )

Fact( TemperatureDistribution,
      "Temper. Distribution",
      'R',    2,  ENUM,   0,    0,   1,      0,      NO,
      Even, Gaussian, td3, td4, td5, td6, td7, td8, td9, td10,
      "Even Temper.", "Gaussian Temper.", 0, 0, 0, 0, 0, 0, 0, 0,
      Value(VectorRandomizing) != NoRandomizing )

Fact( TemperatureFunction,
      "Temper. Decr. Function",
      'R',    3,  ENUM,   0,    0,   1,      1,      NO,
      TFLinear, TFlogarithmical, tf3, tf4, tf5, tf6, tf7, tf8, tf9, tf10,
      "Linear Temper.", "Logarithmical Temper.", 0, 0, 0, 0, 0, 0, 0, 0,
      Value(VectorRandomizing) != NoRandomizing )

Fact( TemperatureInitial,
      "Temper. Init. (% of MaxValue)",
      'R',    4,  INT,   0,    0,   100,    20,      NO,
      ti1, ti2, ti3, ti4, ti5, ti6, ti7, ti8, ti9, ti10,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      Value(VectorRandomizing) != NoRandomizing )

Fact( TemperatureChange,
      "Temper. Change (% of current)",
      'R',    5,  INT,   0,    0,   100,     1,      NO,
      tc1, tc2, tc3, tc4, tc5, tc6, tc7, tc8, tc9, tc10,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      Value(VectorRandomizing) != NoRandomizing )

/* -------------------------------------------------------------------------- */
/*    Parameter identifier                                                    */
/*      key    no   type value  min  max   default   save to file             */
/*      enum of values                                                        */
/*      name of values                                                        */
/*      printing                                                              */
/* -------------------------------------------------------------------------- */


